<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼 전송</title>
    <!-- jQuery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>
    <!-- axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  </head>
  <body>
    <h1>동적 폼 전송</h1>

    <!-- 이름, 성별(radio)을 정보를 입력받는 폼  -->
    <form name="register">
      <label for="name">이름</label>
      <!-- <input type="text" id="name" name="name" value="민영" /> -->
      <input type="text" id="name" name="name" required />
      <br />

      성별 :
      <input type="radio" name="gender" value="m" id="male" required />
      <label for="male">남</label>

      <!-- <input type="radio" name="gender" value="f" id="female" checked /> -->
      <input type="radio" name="gender" value="f" id="female" />
      <label for="female">여</label>
      <br />
      <br />

      <button type="button" onClick="ajaxGet();">Ajax Get 제출</button>
      <button type="button" onClick="ajaxPost();">Ajax Post 제출</button>
      <br />
      <br />

      <button type="button" onClick="axiosGet();">
        Axios Get 제출 (+ form validation)
      </button>
      <button type="button" onClick="axiosPost();">Axios Post 제출</button>
      <br />
      <br />

      <button type="button" onClick="fetchGet();">Fetch Get 제출</button>
      <button type="button" onClick="fetchPost();">Fetch Post 제출</button>
    </form>
    <br />
    <hr />
    <h1>OPEN API 를 이용해 고양이 사진 랜덤 돌리기!</h1>
    <button type="button" onClick="changeImg();">랜덤</button>
    <br />
    <img
      width="500"
      height="500"
      src="https://w7.pngwing.com/pngs/633/239/png-transparent-mario-mario.png"
      alt="고양이"
    />

    <!-- 동적 폼 전송 결과를 보여줄 곳  -->
    <!-- 퀴즈 div.result 선택해서 서버로 받은 data 값 활용해 내용 브라우저 화면에 출력 -->
    <div class="result"></div>
    <!-- 폼 유효성 검사  -->
    <div class="result1"></div>
    <div class="result2"></div>
    <script>
      const img = document.querySelector('img');
      async function changeImg() {
        const res = await axios({
          method: 'get',
          url: 'https://api.thecatapi.com/v1/images/search',
        });
        console.log(res);
        const { data } = res;
        img.src = data[0].url; //img 태그의 src 속성을 open api 에서 받아온 랜덤 이미지 주소로 변경
      }
      //frontend javascript
      const resultBox = document.querySelector('div.result');
      const result1Box = document.querySelector('div.result1');
      const result2Box = document.querySelector('div.result2');

      function ajaxGet() {
        console.log('ajaxGet 함수 호출!');

        // form 선택
        const form = document.forms['register'];
        console.log(form);

        //폼 객체 요소 확인
        console.dir(form);
        console.dir(form.name);
        console.dir(form.gender);
        console.dir(form.name.value); //이름 input에 입력한 값
        console.dir(form.gender.value); //성별 radio input 을 선택한 값

        //요청에 실어서 보낼 데이터 변수
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        }; //서버로 보낼 데이터를 만듦

        //ajax로 서버에 GET 요청 보내기
        $.ajax({
          // ajax경로로 get 요청을 날림
          type: 'get', //요청의 종류 (=form의 method 속성)
          url: '/ajax', //요청의 경로 (=form의 action 속성)
          data: data, //요청에 실어보낼 데이터(서버가 받게 될 데이터)
          success: function (data) {
            //요청이 성공적으로 수행되었을 때 실행할 함수
            console.log(data);
            resultBox.textContent = `GET/ ajax 요청 완료!! ${data.name}님은 ${data.gender}이시죠? ㅎㅎ`;
            resultBox.style.color = 'blue';
          },
        });
      }

      function ajaxPost() {
        console.log('ajaxPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        $.ajax({
          type: 'post',
          url: '/ajax',
          data: data,
          success: function (data) {
            console.log(data);
            resultBox.textContent = `POST/ ajax 요청 완료!! ${data.name}님은 ${data.gender}이시죠? ㅎㅎ`;
          },
        });
      }
      async function axiosGet() {
        console.log('axiosGet 함수 호출!');
        // form 선택
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        console.log(form.name.checkValidity());
        // 같은 name으로 묶인 radio btn은 하나만 선택되더라도 true를 반환
        console.log('gender 첫번째 요소 ->', form.gender[0].checkValidity());
        console.log('gender 두번째 요소 ->', form.gender[1].checkValidity());
        //axios 요청의 결과는 Promise 객체
        //-> then,catch 메서드로 체이닝이 가능 !
        //-> async,await 도 사용할 수 있음 !
        // axios({
        //   method: 'GET', //폼의 요청 방식(= form method 속성과 유사)
        //   url: '/axios', //요청 경로 (= form action 속성 )
        //   //params 키를 사용하지 않고 query string 을 직접 정의해서 요청을 보낼 수 도 있음 (위와 동일한 코드)
        //   //   url: `/axios?name${form.name.value}&gender=${form.gender.value}`,
        //   //   url: '/axioss', //catch 구문 실행해보기
        //   params: data, // 서버로 보낼 데이터 -> query string 을 의미
        // });
        //   .then(function (response) {
        //     console.log(response); //서버의 응답 결과가 들어있는 객체
        //     console.log(response.data); //서버의 응답 데이터를 확인
        //     //ajax는 req.query 가 바로 데이터
        //     //axios는 다른 부가 정보를 같이 추가한다음에 response.data == req.query
        //     //퀴즈1. 객체 구조분해
        //     const { name, gender } = response.data;
        //     resultBox.textContent = `GET/axios 요청 완료 !! ${name}님은 ${gender}이시죠?ㅎㅎ`;
        //     resultBox.style.color = 'green';
        //   })
        //   .catch(function (error) {
        //     console.log('Error!', error);
        //   });
        //퀴즈2.axios 요청 처리 async/await로 변경!
        try {
          //폼 유효성 검사
          // name input 에 입력된 값이 없다면, '이름을 입력해주세요!'
          //gender radio btn을 선택하지 않았다면, '성별을 선택해주세요!'
          //둘 다 입력이 잘 되었다면, axios 로 back에 요청 날리기
          const response = await axios({
            method: 'GET',
            url: '/axios',
            params: data,
          });
          const { name, gender } = response.data;
          if (!form.name.checkValidity()) {
            result1Box.textContent = '이름을 입력해주세요!';
          }
          if (!form.gender[0].checkValidity()) {
            result2Box.textContent = '성별을 선택해주세요!';
          }
          if (form.name.checkValidity() && form.gender[0].checkValidity()) {
            resultBox.textContent = `async 요청 완료 !! ${name}님은 ${gender}이시죠?ㅎㅎ`;
            resultBox.style.color = 'blue';
          }
        } catch (error) {
          console.log('에러임', error);
        }
      }

      //   function axiosPost() {
      //     console.log('axiosPost 함수 호출!');
      //     const form = document.forms['register'];
      //     const data = {
      //       name: form.name.value,
      //       gender: form.gender.value,
      //     };

      //     axios({
      //       method: 'post',
      //       url: '/axios',
      //       data: data, //post 요청 => data에!!
      //     }).then(function (response) {
      //       console.log(response);
      //       console.log(response.data);
      //       resultBox.textContent = `POST/axios 요청 완료 !! ${response.data.name}님은 ${response.data.gender}이시죠?ㅎㅎ`;
      //       resultBox.style.color = 'gold';
      //     });
      //   }
      //async-await로 post방식 변경
      async function axiosPost() {
        console.log('axiosPost 함수 호출!');
        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };
        try {
          const dataa = await axios({
            method: 'post',
            url: '/axios',
            data: data, //post 요청 => data에!!
          });
          const { name, gender } = dataa.data;
          resultBox.textContent = `async/POST/axios 요청 완료 !! ${name}님은 ${gender}이시죠?ㅎㅎ`;
          resultBox.style.color = 'gold';
        } catch (error) {
          console.log('error당 ', error);
        }
      }
      //fetch(url,options)
      function fetchGet() {
        console.log('fetchGet 함수 호출');

        const form = document.forms['register'];
        fetch(
          `/fetch?name=${form.name.value}&gender=${form.gender.value}`
          //fetch는 default로 get 방식으로 작동 options를 생략 가능~
        )
          .then(function (response) {
            return response.json(); //JSON 응답을 네이티브 JavaScript 객체로 파싱
            //JSON 형태로 응답 데이터를 전달받음. 응답(response) 객체는 json()메서드를 제공
            //응답(response) 객체로부터 JSON포맷의 응답 전문을 자바스크립트 객체(js obj)로 변환
          })
          .then(function (data) {
            console.log(data); //리턴값이 data로 들어오게 됨
            //data 변수: 직전 then 메서드의 리턴값 : response.json()
            resultBox.textContent = `GET / fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
            resultBox.style.color = 'limegreen';
          });
      }

      function fetchPost() {
        console.log('fetchPost 함수 호출');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        }; //서버에 넘겨줄 데이터
        //fetch를 이용해 post 요청을 날릴 때에는 option 객체가 반드시 필요함!
        //1. method 옵션 post 지정
        //2. headers 옵션 JSON 포맷 사용 선언
        //3. body 키 서버로 보낼 데이터 선언
        fetch('/fetch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data), //js obj -> json // 데이터를 JSON 형식으로 !!
        })
          .then(function (response) {
            console.log(response);
            return response.json(); // JSON 응답을 네이티브 JavaScript 객체로 파싱
          })
          //   .then(function (data) {
          //     console.log(data);
          //     resultBox.textContent = `POST / fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
          //     resultBox.style.color = 'hotpink';
          //   }
          .then((response) => {
            console.log(data);
            resultBox.textContent = `POST / fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
          });
      }
    </script>
  </body>
</html>
